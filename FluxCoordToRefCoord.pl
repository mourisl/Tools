# Output the reference coordinates for the reads generated by flux simulate
#!/bin/perl

use strict ;


#chr1	HAVANA	transcript	11869	14409	.	+	.	gene_id "ENSG00000223972.4"; transcript_id "ENST00000456328.2"; gene_type "pseudogene"; gene_status "KNOWN"; gene_name "DDX11L1"; transcript_type "processed_transcript"; transcript_status "KNOWN"; transcript_name "DDX11L1-002"; level 2; tag "basic"; havana_gene "OTTHUMG00000000961.2"; havana_transcript "OTTHUMT00000362751.1";
my @cols ;
my $prevLine = 0 ;
my $line ;
my %transcripts ;
my $key ;
my $val ;
my $i ;
my $chrom ;
my $cnt = 0 ;
my @ends ;
my $exonCnt = 0 ;

my $keepSingleExonTxpt = 1 ;

#die "a.pl *.gtf [-M] > out\n" if ( @ARGV eq 0 ) ;
die "usage: a.pl xxx.fq yyy.gtf\n" if ( @ARGV eq 0 ) ;
open FP1, $ARGV[0] ;
open FP2, $ARGV[1] ;

my $prevTid = 1 ;
while (<FP2>)
{
	my $beginNew = 0 ;
	@cols = split ;
	$line = $_ ;
	$prevTid = 1 ;
	if ( $prevLine ne 0 )
	{
		my $tid = 0 ;
		
		if ( $line =~ /transcript_id \"(.+?)\"/) 
		{
			$tid = $1 ;
			#print $tid, "\n" ;
		}
		if ( $prevLine =~ /transcript_id \"(.+?)\"/) 
		{
			$prevTid = $1 ;
		}

		if ( $tid ne $prevTid )
		{
			$beginNew = 1 ;
		}

	}

	if ( $beginNew == 1 && $exonCnt > 0 )
	{
		$val = "" ;
		#print $key, "\n" ;
		for ( $i = 0 ; $i < @ends ; $i += 2 )
		{
			$val = $val.$ends[$i]." ".$ends[$i+1]." " ;
		}

		$transcripts{$prevTid} = $val ;

		#$val = $_ ;

		$val = "" ;	
		undef( @ends ) ;
		$exonCnt = 0 ;
	}
	
	if ( $cols[2] eq "exon" )
	{
		#if ( $cols[4] eq 160061398 )
		#{
		#	print "hi\n" ;
		#}
		if ( ( defined $ends[0] ) && $cols[4] < $ends[0] )
		{
			my @tmpQ = @ends ;
			undef( @ends ) ;
			push @ends, $cols[3], $cols[4] ;
			push @ends, @tmpQ ;
		}
		else
		{
			push @ends, $cols[3], $cols[4] ;
		}
		++$exonCnt ;
		$val = $val.$_ ;
	}

	$prevLine = $line ;
}

if ( $exonCnt > 0 )
{
	$val = "" ;
#print $key, "\n" ;
	for ( $i = 0 ; $i < @ends ; $i += 2 )
	{
		$val = $val.$ends[$i]." ".$ends[$i+1]." " ;
	}

	if ( $prevLine =~ /transcript_id \"(.+?)\"/) 
	{
		$prevTid = $1 ;
	}
	$transcripts{$prevTid} = $val ;

#$val = $_ ;

	$val = "" ;	
	undef( @ends ) ;
	$exonCnt = 0 ;
}

#@Id_29831467 Part2.fastq.019664218 contig=chr20:277737-280965W:ENST00000382352.3:2:3229:2670:2892:S/2 haplotype=0 length=100 orig_begin=0 orig_end=100 haplotype_infix=AATCACCTGGAGGAGGGAGCAGAAAGAGAAGGTTTTTAAGGAGGGGCTTCTGAATACTTGGGAGATACGGAACGGACCAAGGACCACACTCCAGGGTGCA edit_string=MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM strand=forward exp=low
#print keys %transcripts ;
while ( <FP1> )
{
	chomp ;
	$line = $_ ;
	my $readId = (split)[0] ;	
	if ( $line =~ /contig=(.*?)\s/ )
	{
		my $contig = $1 ;
		#print $1, "\n";
		my @cols = split /:/, $contig ;

		my $chrId = $cols[0] ;
		my $tid = $cols[2] ;
		my $fstart = $cols[5] ;
		my $fend = $cols[6] ;

		my $range = $cols[1] ;
		my $tlen = $cols[4] ;
		my $tstart ;
		my $tend ;
		($tstart, $tend)= ( split /-/, $range ) ;

		my $start = 0 ;
		my $end = 0 ;
		if ( !(defined $transcripts{$tid} ) )
		{
			print "Unknown $tid\n" ;
			$line = <FP1> ;
			$line = <FP1> ;
			$line = <FP1> ;
			next ;
		}
		
		# Ignore polyA-tails
		if ( $fstart < 0 || $fend > $tlen )
		{	
			$line = <FP1> ;
			$line = <FP1> ;
			$line = <FP1> ;
			next ;
		}

		my @exons = split /\s/, $transcripts{ $tid } ;
		#print @exons, "\n" ;
		my $offset = 0 ;
		#print "$tid $fstart $fend\n" ;
		#$exons[0] = $tstart ;
		#$exons[ scalar( @exons ) - 1 ] = $tend ;
		for ( $i = 0 ; $i < @exons ; $i += 2 )
		{
			my $len = $exons[$i + 1] - $exons[$i] + 1 ;
			if ( $offset <= $fstart && $fstart <= $offset + $len - 1 )
			{
				$start = $fstart - $offset + $exons[$i] ;		
			}
			
			if ( $offset <= $fend && $fend <= $offset + $len - 1 )
			{
				$end = $fend - $offset + $exons[$i] ;		
			}

			$offset += $len ;
		}
		#die "Exon and range are not compatible. $line\n" if ( $start == 0 || $end == 0 ) ;
		
		print "$chrId $start $end $readId\n" if ( $start != 0 && $end != 0 ) ;
	}
	else
	{
		die "Unknown format. $line\n" ;
	}

	$line = <FP1> ;
	$line = <FP1> ;
	$line = <FP1> ;
}
